/*
LIFE WOULD BE SO BEAUTIFUL IF BRUTE WORKED EVERYTIME
*/
#include <bits/stdc++.h>
#include <string.h>
#define int long long
#define MAX 1000
#define itn int
#define inf 1e9
#define mod (int)(1e9+7)
#define pb push_back
#define all(x) x.begin(),x.end()
#define sitr set<int> :: iterator
#define mitr map<int,int> :: iterator
#define pii pair<int,int>
#define vii vector<pii>
#define vi vector<int>
#define rall(x) x.rbegin(),x.rend()
#define sortall(x) sort(x.begin(),x.end());
#define fast ios_base :: sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
#define test int t;cin>>t;while(t--)
//#include <boost/math/common_factor.hpp>
using namespace std;

int a[1000007];
vi v;
void seive()
{
    for(int i=0;i<=1000000;i++)
    a[i] = 1;

    a[0]=a[1]=0;
    for(int i=2;i<=1000;i++)
    {
        if(a[i] == 1)
        {
            v.pb(i);
            for(int j=2*i;j<=1000000;j+=i)
            a[j] = 0;
        }
    }

    for(int i=321;i<=1000000;i++)
    {
        if(a[i] == 1)
        v.pb(i);
    }
}

void extendedEuclid(int a,int b,int &x,int &y){int res;if(b == 0){res = a;x = 1;y = 0;}else{extendedEuclid(b,a%b,x,y);int t = x;x = y;y = t - (a/b)*x;}}
int mod__Inverse(int a,int m){int x,y;extendedEuclid(a,m,x,y); return (x%m+m)%m;}
int I_fpow(int a,int n){int x=a;int ans = 1;while(n){if(n%2)ans = (ans%mod * x%mod)%mod;x = (x%mod * x%mod)%mod;n /= 2;}return ans;}
int modInverse(int a,int m){return I_fpow(a,m-2);}
//int palindrome (int n){int x;string s = tostring(n); if(!(s.length()%2)) x = s.length()/2 - 1; else x = s.length()/2; for(int i=0;i<=x;i++) {if(s[i] != s[s.length()-1-i]) return 0; } return 1; }
int nCr(int n,int r){if(r>n) return 0;  int k = r; if((n-r)<r) k = (n-r); int g = k; int ans = 1; for(int i=n;i>=n-k+1;i--) { ans *= i; if(ans%g == 0){ans /= g; g--;}} while(g>=1) { ans /= g; g--;} return ans;}
//int fpow(int a,int n){if(n == 1) return a; if(n%2) return (a%mod * fpow(a,n-1)%mod)%mod; return (fpow(a,n/2)%mod * fpow(a,n/2)%mod)%mod;}
int toint(const string &s) {stringstream ss; ss << s; int x; ss >> x; return x;}
//string tostring ( int number ){stringstream ss; ss<< number; return ss.str();}
int nCrmodp(int n,int r){int p = mod;int fact[n+1]; fact[0] = 1;for(int i=1;i<=n;i++)fact[i] = ((fact[i-1]%p) * (i%p))% p;return ((fact[n]%p) * (modInverse(fact[r],p)%p) * (modInverse(fact[n-r],p)%p))%p;}
int fact(int n){int ans = 1;if(n == 0 || n == 1) return 1; for(int i=2;i<=n;i++) ans *= i; return ans;}
int derangement(int n){int ans = 0;for(int i=0;i<=n;i++){ans += pow(-1,i)*(fact(n)/fact(i));}return ans;}

int sum(int x)
{
    int sum = 0;
    while(x)
    {
        sum += (x%10);
        x /= 10;
    }
    return sum;
}

bool prime(int n)
{
    if(n == 3)
        return true;
    for(int i=2;i<=sqrt(n);i++)
    {
        if(n%i == 0)
            return false;
    }
    return true;
}

int32_t main(){
    fast;

    int n;
    cin>>n;

    if(prime(n))
    {
        cout<<1<<"\n";
        cout<<n;
        return 0;
    }
    if(prime(n-2))
    {
        cout<<2<<"\n";
        cout<<2<<" "<<n-2;
        return 0;
    }
    seive();
    n = n-3;
    for(int i=0;i<=n;i++)
    {
        if(prime(n-v[i]))
        {
            cout<<3;
            cout<<"\n"<<3<<" "<<v[i]<<" "<<n-v[i];
            return 0;
        }
    }


    return 0;
}
