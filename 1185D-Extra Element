    /*
    LIFE WOULD BE SO BEAUTIFUL IF BRUTE WORKED EVERYTIME
    */
    #include <bits/stdc++.h>
    #include <string.h>
    #define int long long
    #define MAX 1000
    #define itn int
    #define inf 1e12
    #define mod 1000000007
    #define pb push_back
    #define all(x) x.begin(),x.end()
    #define sitr set<int> :: iterator
    #define mitr map<int,int> :: iterator
    #define pii pair<int,int>
    #define vii vector<pii>
    #define vi vector<int>
    #define sortall(x) sort(x.begin(),x.end());
    #define fori(i,n) for(int i=0;i<n;i++)
    #define test int t;cin>>t;while(t--)
    #define fast ios_base :: sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
    using namespace std;
    /*
    int a[1000007];
    vi v;
    void seive()
    {for(int i=0;i<=1000000;i++)
    a[i] = 1;
    a[0]=a[1]=0;
    for(int i=2;i<=1000;i++){
    if(a[i] == 1)
    {v.pb(i);for(int j=2*i;j<=1000000;j+=i)a[j] = 0;}
    }
    for(int i=1001;i<=1000000;i++){
    if(a[i] == 1)
    v.pb(i);
    }
    }
    */
    //int palindrome (int n){int x;string s = tostring(n); if(!(s.length()%2)) x = s.length()/2 - 1; else x = s.length()/2; for(int i=0;i<=x;i++) {if(s[i] != s[s.length()-1-i]) return 0; } return 1; }
    //int nCr(int n,int r){if(r>n) return 0;  int k = r; if((n-r)<r) k = (n-r); int g = k; int ans = 1; for(int i=n;i>=n-k+1;i--) { ans *= i; if(ans%g == 0){ans /= g; g--;}} while(g>=1) { ans /= g; g--;} return ans;}
    //int fpow(int a,int n){if(n == 0)return 1;if(n == 1) return a; if(n%2) return (a%mod * fpow(a,n-1)%mod)%mod; return (fpow(a,n/2)%mod * fpow(a,n/2)%mod)%mod;}
    //int toint(const string &s) {stringstream ss; ss << s; int x; ss >> x; return x;}
    //string tostring ( int number ){stringstream ss; ss<< number; return ss.str();}
    //int negativemod(int a,int n){return (a%n)+n;}
    //int palindrome (string s){int x; if(!(s.length()%2)) x = s.length()/2 - 1; else x = s.length()/2; for(int i=0;i<=x;i++) {if(s[i] != s[s.length()-1-i]) return 0; } return 1; }
    //int fpow(int a,int n,int modd){if(n == 1) return a; if(n%2) return (a%modd * fpow(a,n-1,modd)%modd)%modd; return (fpow(a,n/2,modd)%modd * fpow(a,n/2,modd)%modd)%modd;}
    //int I_fpow(int a,int n){int x=a;int ans = 1;while(n){if(n%2)ans = (ans%mod * x%mod)%mod;x = (x%mod * x%mod)%mod;n /= 2;}return ans;}
    //int fact(int n){int ans=1;if(n==0 || n==1)return 1;for(int i=2;i<=n;i++)ans*=i;return ans;}
    //int nCrmodp(int n,int r){int p = mod;int fact[n+1]; fact[0] = 1;for(int i=1;i<=n;i++)fact[i] = ((fact[i-1]%p) * (i%p))% p;return ((fact[n]%p) * (modInverse(fact[r],p)%p) * (modInverse(fact[n-r],p)%p))%p;}


    // Addition of 2 strings ... based on the addition performed with the help of carry.
    //string add2strings(string s1,string s2){if(s1.length()>s2.length())swap(s1,s2);int n = s1.length();int m = s2.length();int carry = 0;reverse(all(s1));reverse(all(s2));string ans = "";for(int i=0;i<n;i++){int sum = (char)(s1[i]-'0')+(char)(s2[i]-'0')+carry;ans += (char)(sum%10 + '0');carry = sum/10;}for(int i=n;i<m;i++){int sum = (char)(s2[i]-'0')+carry;ans += (char)(sum%10 + '0');carry = sum/10;}if(carry)ans += (char)(carry+'0');reverse(all(ans));return ans;}


    //key to euclids extended --> gcd(a,b) = gcd(b,a%b)
    //also a%b = a-(a/b)*b;
    //hence ax+by = bx1+(a%b)y1.. ax+by = bx1+(ay1-(a/b)*by1)..
    //comparing x = y1;
    //y = x1-(a/b)*y1

    //void extendedEuclid(int a,int b,int &x,int &y){int res;if(b == 0){res = a;x = 1;y = 0;}else{extendedEuclid(b,a%b,x,y);int t = x;x = y;y = t - (a/b)*x;}}

    //if m is prime fermats little theorem can be used
    //int modInverse(int a,int m){return I_fpow(a,m-2);}

    //if not
    //In extendedGCD x is the mod mult inverse of a under b and y is the mod mult inverse of b under a
    //Inverse exist if a,m is co-prime
    //int mod__Inverse(int a,int m){int x,y;extendedEuclid(a,m,x,y); return (x%m+m)%m;}

    int32_t main(){
        fast;
        int n;
        cin>>n;
        int a[n],b[n];
        for(int i=0;i<n;i++)
            cin>>b[i];
        for(int i=0;i<n;i++)
            a[i] = b[i];
        sort(a,a+n);

        map<int,int>mp;
        for(int i=1;i<n;i++)
        {
            mp[a[i]-a[i-1]]++;
        }

        if(mp.size() > 3)
        {
            cout<<-1;
            return 0;
        }

        int k = 0;
        vii c;
        for(mitr i=mp.begin();i!=mp.end();i++)
        {
            c.pb(make_pair(i->second,i->first));
            k++;
        }
        //cout<<k;
        sort(all(c));
        int index;
        if(k == 3)
        {
            //cout<<c[0].first<<" "<<c[1].first;
            if(c[0].first == 1 && c[1].first== c[0].first)
            {
                for(int i=1;i<n-1;i++)
                {
                    if((a[i]-a[i-1] == c[0].second && a[i+1]-a[i] == c[1].second) || (a[i]-a[i-1] == c[1].second && a[i+1]-a[i] == c[0].second))
                        index = a[i];
                }
            }
            else
            {
                cout<<-1;
                return 0;
            }
        }
        else
        if(k == 2)
        {
            //cout<<c[0].second;
            if(c[0].first == 2)
            {
                for(int i=1;i<n;i++)
                {
                    if(c[0].second == a[i]-a[i-1])
                    {
                        index = a[i-1];
                        //break;
                    }
                }
            }
            else
            if(c[0].first == 1)
            {
                if(a[1]-a[0] == c[0].second)
                    index = a[0];
                else
                if(a[n-1]-a[n-2] == c[0].second)
                    index = a[n-1];
                else
                {
                    for(int i=1;i<n-2;i++)
                    {
                        if(a[i+1]-a[i] == c[0].second)
                        {
                            index = a[i+1];
                            //break;
                        }
                    }
                }

            }

        }
        else
        if(k == 1)
        {
            for(int i=0;i<n;i++)
            {
                if(b[i] == a[0])
                {
                    cout<<i+1;
                    return 0;
                }

            }
            return 0;
        }
        //cout<<index;

        for(int i=0;i<n;i++)
        {
            if(a[i] == index)
            {
                a[i] = -inf;
                break;
            }

        }

        sort(a,a+n);
        int x = a[2]-a[1];
        for(int i=1;i<n-1;i++)
        {
            if(a[i+1]-a[i] != x)
            {
                cout<<-1;
                //cout<<"hi";
                return 0;
            }
        }
        //cout<<index;
        for(int i=0;i<n;i++)
        {
            if(b[i] == index)
            {
                cout<<i+1;
                return 0;
            }
        }


        return 0;
    }
