    /* Life would be so easy if brute worked everytime */
    #include <bits/stdc++.h>
    #include <string.h>
    #define int long long
    #define itn int
    #define inf 1e9
    #define mod 1000000007
    #define pb push_back
    #define sortall(x) sort(x.begin(),x.end());
    #define fast ios_base :: sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
    using namespace std;

    int a[5000007];
    vector <int> v;
    /*bool sortinrev(const pair<int,int> &a,  const pair<int,int> &b)
    {
           return (a.first > b.first);
    }*/
    void seive()
    {
        for(int i=0;i<=5000000;i++)
        a[i] = 1;

        a[0]=a[1]=0;
        for(int i=2;i<=2500;i++)
        {
            if(a[i] == 1)
            {
                v.pb(i);
                for(int j=2*i;j<=5000000;j+=i)
                a[j] = 0;
            }
        }

        for(int i=2501;i<=5000000;i++)
        {
            if(a[i] == 1)
            v.pb(i);
        }
    }
    /*
    int palindrome (int n)
    {
        int x;
        string s = to_string(n);
        if(!(s.length()%2))
        x = s.length()/2 - 1;
        else
        x = s.length()/2;

        for(int i=0;i<=x;i++)
        {
            if(s[i] != s[s.length()-1-i])
            return 0;
        }
        return 1;
    }


    int nCr(int n,int r)
    {
        if(r>n)
            return 0;
        int k = r;
        if((n-r)<r)
            k = (n-r);
        int g = k;
        int ans = 1;
        for(int i=n;i>=n-k+1;i--)
        {
            ans *= i;

            if(ans%g == 0)
            {
                ans /= g;
                g--;
            }
        }
        while(g>=1)
        {
            ans /= g;
            g--;
        }

        return ans;

    }


    int fpow(int a,int n)
    {
        if(n == 1)
        return a;

        if(n%2)
        return (a%mod * fpow(a,n-1)%mod)%mod;
        return (fpow(a,n/2)%mod * fpow(a,n/2)%mod)%mod;
    }
    */
    string shorter(string s,string t)
    {
        if(t.length()<s.length())
            return t;
        return s;
    }
    bool linear_search(vector<int>&v,int n)
    {
        for(int i=0;i<v.size();i++)
        {
            if(v[i] == n)
                return true;

        }
        return false;

    }
    int32_t main() {

        fast;
        int n,m;
        cin>>n>>m;
        int a[n][m];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                cin>>a[i][j];
        }
        int b[n][m];
        int c[n][m];

        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                b[i][j] = a[i][j];
                c[i][j] = a[i][j];
            }
        }

        for(int i=0;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                c[i][j] = c[i][j-1]+a[i][j];
            }
        }
        for(int i=0;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                b[j][i] = b[j-1][i]+a[j][i];
            }
        }
        if(n == 1 && m == 1)
        {
            cout<<0;
            return 0;
        }
        int cnt = 0;
        if(n == 1 && m != 1)
        {
            for(int j=0;j<m;j++)
            {
                if(a[0][j] == 0)
                {
                    if(c[0][j-1]>=1)
                        cnt++;
                    if(c[0][m-1]-c[0][j-1] >= 1)
                        cnt++;
                }
            }
        }
        if(m == 1 && n != 1)
        {
            for(int j=0;j<n;j++)
            {
                if(a[j][0] == 0)
                {
                    if(b[j-1][0]>=1)
                        cnt++;
                    if(b[n-1][0]-b[j-1][0] >= 1)
                        cnt++;
                }
            }
        }

        else if(n != 1 && m != 1){
                //cout<<1;
        if(a[0][0] == 0)
        {
            if(b[n-1][0]>=1)
                cnt++;
            if(c[0][m-1]>=1)
                cnt++;

        }
        if(a[0][m-1] == 0)
        {
            if(b[n-1][m-1]>=1)
                cnt++;
            if(c[0][m-2]>=1)
                cnt++;

        }
        if(a[n-1][0] == 0)
        {
            if(b[n-2][0]>=1)
                cnt++;
            if(c[n-1][m-1]>=1)
                cnt++;
        }
        if(a[n-1][m-1] == 0)
        {
            if(b[n-2][m-1]>=1)
                cnt++;
            if(c[n-1][m-2]>=1)
                cnt++;
        }

        for(int j=1;j<m-1;j++)
        {
            if(a[0][j] == 0)
            {
                if(b[n-1][j]>=1)
                    cnt++;
                if(c[0][j-1]>=1)
                    cnt++;
                if((c[0][m-1]-c[0][j-1])>=1)
                    cnt++;
            }
        }
        for(int j=1;j<m-1;j++)
        {
            if(a[n-1][j] == 0)
            {
                if(b[n-2][j]>=1)
                    cnt++;
                if(c[n-1][j-1]>=1)
                    cnt++;
                if((c[n-1][m-1]-c[n-1][j-1])>=1)
                    cnt++;
            }
        }
        for(int i=1;i<n-1;i++)
        {
            if(a[i][0] == 0)
            {
                if(b[i-1][0]>=1)
                    cnt++;
                if((b[n-1][0]-b[i-1][0])>=1)
                    cnt++;
                if(c[i][m-1]>=1)
                    cnt++;
            }
        }
        for(int i=1;i<n-1;i++)
        {
            if(a[i][m-1] == 0)
            {
                if(b[i-1][m-1]>=1)
                    cnt++;
                if((b[n-1][m-1]-b[i-1][m-1])>=1)
                    cnt++;
                if(c[i][m-2]>=1)
                    cnt++;
            }
        }

        for(int i=1;i<n-1;i++)
        {
            for(int j=1;j<m-1;j++)
            {
                if(a[i][j] == 0)
                {
                    if(c[i][j-1]>=1)
                        cnt++;
                    if((c[i][m-1]-c[i][j-1])>=1)
                        cnt++;
                    if(b[i-1][j]>=1)
                        cnt++;
                    if((b[n-1][j]-b[i-1][j])>=1)
                        cnt++;

                }
            }
        }
        }
        cout<<cnt;

    }
