/*
LIFE WOULD BE SO BEAUTIFUL IF BRUTE WORKED EVERYTIME
*/
#include <bits/stdc++.h>
#include <string.h>
#define int long long
#define ll long long
#define MAX 1000000
#define itn int
#define inf 1e9
#define mod (int)1e9 + 7
#define pb push_back
#define all(x) x.begin(),x.end()
#define sitr set<int> :: iterator
#define mitr map<int,int> :: iterator
#define pii pair<int,int>
#define vii vector<pii>
#define vi vector<int>
#define sortall(x) sort(x.begin(),x.end());
#define fori(i,n) for(int i=0;i<n;i++)
#define test int t;cin>>t;while(t--)
#define fast ios_base :: sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)
using namespace std;
/*
int a[1000007];
vi v;
void seive()
{for(int i=0;i<=1000000;i++)
a[i] = 1;
a[0]=a[1]=0;
for(int i=2;i<=1000;i++){
if(a[i] == 1)
{v.pb(i);for(int j=2*i;j<=1000000;j+=i)a[j] = 0;}
}
for(int i=1001;i<=1000000;i++){
if(a[i] == 1)
v.pb(i);
}
}
*/
//int palindrome (int n){int x;string s = tostring(n); if(!(s.length()%2)) x = s.length()/2 - 1; else x = s.length()/2; for(int i=0;i<=x;i++) {if(s[i] != s[s.length()-1-i]) return 0; } return 1; }
//int nCr(int n,int r){if(r>n) return 0;  int k = r; if((n-r)<r) k = (n-r); int g = k; int ans = 1; for(int i=n;i>=n-k+1;i--) { ans *= i; if(ans%g == 0){ans /= g; g--;}} while(g>=1) { ans /= g; g--;} return ans;}
//int fpow(int a,int n){if(n == 0)return 1;if(n == 1) return a; if(n%2) return (a%mod * fpow(a,n-1)%mod)%mod; return (fpow(a,n/2)%mod * fpow(a,n/2)%mod)%mod;}
//int toint(const string &s) {stringstream ss; ss << s; int x; ss >> x; return x;}
//string tostring ( int number ){stringstream ss; ss<< number; return ss.str();}
//int negativemod(int a,int n){return (a%n)+n;}
//int palindrome (string s){int x; if(!(s.length()%2)) x = s.length()/2 - 1; else x = s.length()/2; for(int i=0;i<=x;i++) {if(s[i] != s[s.length()-1-i]) return 0; } return 1; }
//int fpow(int a,int n,int modd){if(n == 1) return a; if(n%2) return (a%modd * fpow(a,n-1,modd)%modd)%modd; return (fpow(a,n/2,modd)%modd * fpow(a,n/2,modd)%modd)%modd;}
//int I_fpow(int a,int n){int x=a;int ans = 1;while(n){if(n%2)ans = (ans%mod * x%mod)%mod;x = (x%mod * x%mod)%mod;n /= 2;}return ans;}
//int fact(int n){int ans=1;if(n==0 || n==1)return 1;for(int i=2;i<=n;i++)ans*=i;return ans;}
//int nCrmodp(int n,int r){int p = mod;int fact[n+1]; fact[0] = 1;for(int i=1;i<=n;i++)fact[i] = ((fact[i-1]%p) * (i%p))% p;return ((fact[n]%p) * (modInverse(fact[r],p)%p) * (modInverse(fact[n-r],p)%p))%p;}
//void Store_N_factorial_By_MOD(){int i,j,k; arr[0] =1;for(i=1;i<MAX;i++) arr[i] = (arr[i-1]*i)%MOD;return;}


// Addition of 2 strings ... based on the addition performed with the help of carry.
//string add2strings(string s1,string s2){if(s1.length()>s2.length())swap(s1,s2);int n = s1.length();int m = s2.length();int carry = 0;reverse(all(s1));reverse(all(s2));string ans = "";for(int i=0;i<n;i++){int sum = (char)(s1[i]-'0')+(char)(s2[i]-'0')+carry;ans += (char)(sum%10 + '0');carry = sum/10;}for(int i=n;i<m;i++){int sum = (char)(s2[i]-'0')+carry;ans += (char)(sum%10 + '0');carry = sum/10;}if(carry)ans += (char)(carry+'0');reverse(all(ans));return ans;}


//key to euclids extended --> gcd(a,b) = gcd(b,a%b)
//also a%b = a-(a/b)*b;
//hence ax+by = bx1+(a%b)y1.. ax+by = bx1+(ay1-(a/b)*by1)..
//comparing x = y1;
//y = x1-(a/b)*y1

//void extendedEuclid(int a,int b,int &x,int &y){int res;if(b == 0){res = a;x = 1;y = 0;}else{extendedEuclid(b,a%b,x,y);int t = x;x = y;y = t - (a/b)*x;}}

//if m is prime fermats little theorem can be used
//int modInverse(int a,int m){return I_fpow(a,m-2);}

//if not
//In extendedGCD x is the mod mult inverse of a under b and y is the mod mult inverse of b under a
//Inverse exist if a,m is co-prime
//int mod__Inverse(int a,int m){int x,y;extendedEuclid(a,m,x,y); return (x%m+m)%m;}
ll arr[MAX];
ll Sqr(ll n) {return n*n;}
ll MOD = mod;
ll BigMod(ll B,ll P,ll M)
{
    if(P==0) return 1;
    else if(P%2==0) return Sqr(BigMod(B,P/2,M))%M;
    else return (B%MOD) * (BigMod(B,P-1,M))%M;
}

ll nCr_MOD(ll n ,ll r)
{
    ll num,denom,ret;
    num=arr[n];
    denom=(arr[r]*arr[n-r])%MOD;
    ret = (num * BigMod(denom,MOD-2,MOD))%MOD; /// inverse Mod: (x/y)%M = ((x%M)*(y^M-2)%M)%M  if M=Prime Number
    return ret;
}

int32_t main(){
    fast;
    int n;
    cin>>n;
    vi a(n);
    vii v;
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
        v.pb({a[i],i});
    }
    sort(all(v));

    vector< pair<int,pair<int,int> > > vx;
    int b[n];
    for(int i=0;i<n;i++)
        b[i] = a[i];
    int k = 0;
    while(k < v.size())
    {
        if(b[v[k].second] != 0)
        {
            int x = a[v[k].second];
            int j = v[k].second;
            int i = j;
            while(a[j]%x == 0 && j >= 0)
            {
                b[j] = b[j]%x;
                j--;
            }

            while(a[i]%x == 0 && i <= n-1)
            {
                b[i] = b[i]%x;
                i++;
            }

            vx.pb({j+1-i+1,{j+1,i-1}});
            //cout<<i<<" "<<j<<"\n";
        }
        k++;


    }

    sort(all(vx));
    int d = vx[0].first;
    int cnt =0 ;

    for(int i=0;i<vx.size();i++)
    {
        if(d == vx[i].first)
        {
            cnt++;
        }
        else
            break;
    }
    cout<<cnt<<" "<<-1*d<<"\n";
    for(int i=0;i<cnt;i++)
    {
        cout<<vx[i].second.first+1<<" ";
    }
    return 0;
}
